datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  providerAccountId String
  userId            String  @db.ObjectId
  access_token      String? @db.String
  expires_at        Int?
  id_token          String? @db.String
  provider          String
  refresh_token     String? @db.String
  scope             String?
  session_state     String?
  token_type        String?
  type              String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  name          String?

  accounts      Account[]
  conversations ConversationParticipant[]
  messages      Message[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime
  identifier String

  @@unique([identifier, token])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  lastMessageId String?  @unique @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  lastMessage  Message?                  @relation(name: "lastMessage", fields: [lastMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  conversationId  String  @db.ObjectId
  userId          String  @db.ObjectId
  seenLastMessage Boolean

  conversation Conversation @relation(fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  body           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  isLastMessage Conversation? @relation(name: "lastMessage")
  sender        User          @relation(fields: [senderId], references: [id])
}
